
1.	Insert a number. Print ‘yes’ if the number is prime, ‘no’ otherwise.	
	
	function isPrime(num){
		let count=0;

		for (let i=2; i<=(num/2); i++){
		
			 if(!(num%i)){
			  count++;
			 }
		}
		if(count === 0){
				return "yes";
		}
		else{
			return "no";
		}
	}

	console.log(isPrime(401));
	console.log(isPrime(63));
	
	
2.	Given a number n ( n>= 0 ). Print nth Fibonacci number.  (Fibonacci series: 0, 1, 1, 2, 3, 5, 8 …, ak = ak-1 + ak-2)

	function fibonacci(n){
    if(n<=1){
    		return n;
    }
    else{
    	return fibonacci(n-1) + fibonacci(n-2);
    }
	}

	console.log(fibonacci(0));
	console.log(fibonacci(2));
	console.log(fibonacci(10));
	console.log(fibonacci(20));
	

3.	Given a number n( n> 0 ). Print Fibonacci series up to n.


		function fibUpToN(n){
		let arr=[0,1];
		  for (let i=2; i<=n; i++){
			if((arr[i-1]+arr[i-2]) <= n){
			arr.push(arr[i-1]+arr[i-2]);
			}
			else{
			 break;
			}
			
		  }
		 return arr.join(",");

		}

		console.log(fibUpToN(7));
		console.log(fibUpToN(45));
		
		
4.	Insert a number. Calculate product and sum of the digits of the number. If product is 
divisible by the sum, print the quotient, otherwise print the remainder.


		function calculate(n){
		  if(n !== 0){
				let str=n.toString();
				let sum = 0, product = 1;

				for (let i=0; i<str.length; i++){
				  sum += +str[i];
				   product *= +str[i];

				} 

				if(!(product%sum)){
				   console.log(`Quotient is ${product/sum}.`);  
				}
				else{
				  console.log(`Remainder is ${product%sum}.`); 
				} 
		  }
		  else{
				console.log(`Cannot calculate.`); 
		  }


		}
		calculate(1233);
		calculate(5);
		calculate(0);
		calculate(455);
		
		
5.	Given three numbers a, b (a ≤ b) and num. Create an array of evenly spaced numbers
 by the given num length over the specified interval (from a to b).
 
			 function array_of_evenly_spaced_numbers(a,b,num){
			  let arr=[]; 
			  
				let n = (b-a)/(num-1);    
				arr.push(a);      
				
				for (let i=1; i< num ; i++){
						arr.push(arr[i-1]+n)
				}
				 return arr;

			} 


			console.log(array_of_evenly_spaced_numbers(1, 5, 1));
			console.log(array_of_evenly_spaced_numbers(10, 100, 3));
			console.log(array_of_evenly_spaced_numbers(1, 5, 6)); 
			
			

6.	Given an array of numbers. Find the index of the second maximum element. 

			function indexOfSecondMax(arr){
				let i, j, tmp, arr1=[...arr];

				for(i=0; i<arr.length; i++){
				   for(j=0; j<arr.length-i-1; j++){
					  if(arr[j]>arr[j+1]){
						  tmp=arr[j];
						  arr[j]=arr[j+1];
						  arr[j+1]=tmp;
					   }
				   }
				}
				
				let secmax=arr[arr.length-2];    
				console.log(arr1.indexOf(secmax));

				
			}
			
			
			indexOfSecondMax([23,  -98, 0, -456, 12, 8]);
			indexOfSecondMax([-60, 2, 43, -18, 5, -19, 36, 7, 56]);
 
 
 
7.	Given an array of numbers, padding amount and repeat count. Pad the array in the
 following way: the padding amount specifies how many elements should be taken from the array edges, 
 the repeat amount specifies how many times the pad should be repeated. 
 Also, you should check that  padding amount <= length of array.
 
		function padding_and_repeat(arr,pad,rep){
				  let tmp_arr=[...arr];
				  
						if(pad<=arr.length){
					  while(pad!==0){  
						   for (let i=1; i<=rep; i++){
								arr.unshift(tmp_arr[pad-1]);
								arr.push(tmp_arr[tmp_arr.length-pad]);    
						   }  
						pad--;
						}
					  console.log(arr);
					}
					else{
					  console.log("Invalid padding amount")
					}
		} 
		padding_and_repeat([1, 2, 3, 4], 1, 3);
		padding_and_repeat([1, 2, 3, 4], 2, 1);
		padding_and_repeat([1], 1, 3);
		padding_and_repeat([1], 2, 3);

		
		
  
		 
 
 


