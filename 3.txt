
1.	Write a program to print X star pattern series using loop.
	
	function printXStar(n){
	 let re ='';
		for(let i=0; i<2*n-1; i++){
			for(let j=0;j<2*n-1; j++){
				if (j==i || j==2*n-2-i){
				re+='*';
				}
				else{
				re+=' ';
				}
			}
		 re+='\n\n';
		}
		console.log(re);
	}
		
	printXStar(5);
	
	
2.	Given an array of numbers. Print frequency of each unique number.
 (Frequency is the count of particular element divided by the count of all elements)
		 
	 function numFrequency(arr){
	  let lng=arr.length;  
	  let tmp_arr=[]; 
	  let  obj={};
	   
			for (let i=0; i<lng; i++ ){  
			let count=1;
			  if(tmp_arr.indexOf(arr[i]) === -1){
				tmp_arr.push(arr[i]);
			  }
							else{
					  if(obj.hasOwnProperty(arr[i])) {
							   obj[arr[i]]=obj[arr[i]]+1;
					  }
					  else{
						  count++;
						 obj[arr[i]]=count;  
					  }              	    
				} 
				
			}
			
		  for(let i=0; i<tmp_arr.length; i++ ){
				if(obj.hasOwnProperty(tmp_arr[i])) {
					 console.log(`${tmp_arr[i]} : ${+(obj[tmp_arr[i]]/lng).toFixed(16)} `);                       
			  }
			  else{
			   console.log(`${tmp_arr[i]} : ${+(1/lng).toFixed(16)} `);  
			  } 
		  }  
		
	  
	}

	numFrequency([1, 1, 2, 2, 3]);
	numFrequency([4, 4]);
	numFrequency([1, 2, 3]);

			

3.	Given an array of strings and numbers. Print the number 
of integers and the number of strings in the array.

	function count_str_nums(arr){   
	  let obj={
	  Numbers: 0,
	  Strings:0
	  }
	  let res='';

		for(let i=0; i<arr.length; i++ ){  
				if (typeof(arr[i])==='string'){
			   obj.Strings++;
				}
				else if(typeof(arr[i])==='number'){
				 obj.Numbers++;
				}
		  }       
		  for(let key in obj){
			   res+= key+': '+obj[key]+', '
		  }   
	  return res.slice(0,-2);  
	}

	 console.log(count_str_nums([1, '10', 'hi', 2, 3]));
	 console.log(count_str_nums([1, 4, 'i am a string', '456']));

		
4.	Write a function that accepts a string(a sentence) as a parameter and 
finds the longest 	word within the stringâ€¤ If there are several words which are
the longest ones, print the last word(words can be separated by space, comma or hyphen).

			function find_longest_word(str){
				let arr = str.split('');
				 for(let i=0; i<arr.length; i++ ){  
				   if (arr[i]===',' || arr[i]==='-'){
					 arr[i]=' ';
				   }
				 }
				 arr=arr.join('');
				 arr = arr.split(' ');
				 let ind = arr.length;
					  let long = '';
					for(let i=0; i<ind; i++ ){ 		  
						  if(arr[i].length >= long.length){
								  long = arr[i];
						  }      
					   }   

					  console.log(long); 
			}

		find_longest_word('A revolution without dancing is a revolution not worth having.'); 
		find_longest_word('Which would be worse - to live as a monster, or to die as a good man?');
	 
5. 	Write a function to find longest substring in a given a string without repeating characters 
except space character. If there are several, return the last one. 
Consider that all letters are lowercase.


	function  longest_substring(str){ 
     let res='';
     let long="";
     
	    for(let i=0; i<str.length; i++){
        if(str[i] !== " "){
        	if(!res.includes(str[i])){
           		res+=str[i];                      
            if (long.length < res.length){
                 long=res
              }                        
          } 
          else{          
             let start = res.indexOf(str[i]);           
             res = res.substring(start + 1);
             res+=str[i];            
              if (long.length < res.length){
                 long=res
              }
          }          
        }
        else{
        res+=' ';
        }        
	   	}
   return long;  
	}
    
	console.log(longest_substring('there are no two words in the english language more harmful than "good job".'));  
	console.log(longest_substring('parting your soup is not a miracle, bruce.'));

  
6. 	Write a function to compute a new string from the given one by moving the first char to 
	come after the next two chars, so "abc" yields "bca". Repeat this process for each 	subsequent 
	group of 3 chars. Ignore any group of fewer than 3 chars at the end.
	
	function  moving_char(str){  
	  let arr = str.split('');
    let tmp;
    let res=[];
	    for(let i=0; i<arr.length; i=i+3 ){ 
        tmp=arr.slice(i,i+3);
            if (tmp.length === 3){
             res.push(tmp[1]);            
             res.push(tmp[2]); 
             res.push(tmp[0]);
            }
            else{
                for(let j=i; j<arr.length; j++){
                 res.push(arr[j]); 
                }
             
            }
	   		}
     console.log(res.join(''))
	 
	}
  
   moving_char('dfgjkloyp');
   moving_char('aweyoolp');

7. 	Write a function, which receives an array as an argument which elements arrays of 
	numbers. Find biggest negative number of each array. Return product of that numbers.
	If 	there is not any negative number in an array, ignore that one. Check that items
	of the 	given array are arrays.	
	
	function product(arr){ 
		  let res=1;
		  let big = -Infinity;
			for(let i=0; i<arr.length; i++){    
			  if(Array.isArray(arr[i])){
				   for(let j=0; j<arr[i].length; j++){
					 if (arr[i][j]<0 && arr[i][j]>big){
						big=arr[i][j];             
					  }
					}
					if(big !== -Infinity){
						res*=big
						big = -Infinity;
						}              
			  }      
			  else{
					return 'Invalid Argument';
			  } 
			}   
			return res===1?'No negatives':res;
	}

	 console.log(product([[2, -9, -3, 0], [1, 2], [-4 , -11, 0]]));
	 console.log(product([[3, 4], [11, 0], [5, 6, 7, 8]]));
	 console.log(product([1, 2, 3]));

8.	 Write a JavaScript function to get all possible subsets of 
length 3 of the given array. 	Assume that all elements in the array are unique.


	function  possible_subsets(arr){  
  	let res_arr=[], tmp=[];
 
     if(arr.length<3){
     return arr;    
     }
	    for(let i=0; i<arr.length; i++ ){       
      		for(let j=i+1; j<arr.length; j++ ){ 
            for(let k=j+1; k<arr.length; k++ ){ 
            tmp[0]=arr[i];
             tmp[1]=arr[j];
              tmp[2]=arr[k]; 
               res_arr.push(tmp)
              tmp=[];
             }
	   			}
	   	}
      
		 return res_arr;  
	}
  
  
	console.log(possible_subsets([4]));    
	console.log(possible_subsets([19, 6]));  
	console.log(possible_subsets([5, 9, 23, 0, -2, -1]));


